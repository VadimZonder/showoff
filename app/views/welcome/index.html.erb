<% 
require 'csv' 
require 'net/ftp'
require 'tempfile'
require "open-uri"
require 'rubygems'
%>

<% if user_signed_in?  %>
<P>@home  = <%= @home%></P>
<P>@printX  = <%= @printX%></P>
<%########URLs from controller with all the labels %>
<%=@hardcodedURLsC = @labelsArray2%>
<P>urls from VAR - = <%=@hardcodedURLsC%></P>
<P>from the DB urls = <%=@hardcodedURLsDB = Url.find_by_account_number(@accountNumber).urls%></p>
<P>is ftp2= <%##=IsFTp.find_by_account_number(@accountNumber).isFTP%></P>
<P>labelsArray2= <%=@labelsArray2%></P>
<P>enabling to print = <%=@printX%></P>
<P>deployment status = <%=@deployment%></P>
<P>server print = <%=@printServer = cookies[:print]%></P>
<P>csv Read = <%=@csvRead%></P>
<P>localFileRead= <%=@localFileRead%></P>
<P>labels uri = <%=@labelURI%></P>
<P>labelsArray2 = <%=@labelsArray2%></P>
<P>@debug2  = <%=@mapping_array %></P>
<P>@ @xmlPayload  = <%= @xmlPayload %></P>
<P>@csvArrayFTP  = <%= @csvArrayFTP%></P>
<P> Read csv file straight from File.read<%= @debugFile = File.read("FromFTP.csv") %></P>
<P>CSV Read from FTP =  <%= @csvReadFTP%></P>
<P>@csvColumn1  = <%= @csvColumn1 %></P>
<P>@csvColumn3  = <%= @csvColumn3 %></P>
<P>@csvColumn4  = <%= @csvColumn4 %></P>
<P>@csvColumn5  = <%= @csvColumn5 %></P>
<P>@csvColumn6  = <%= @csvColumn6 %></P>
<P>@csvColumn7  = <%= @csvColumn7 %></P>
<P>@csvColumn8  = <%= @csvColumn8 %></P>
<P>@csvColumn9  = <%="'"+@csvColumn9.to_s+"'" %></P>
<P>@csvColumn24  = <%= @csvColumn24 %></P>
<P>@csvColumn25  = <%= @csvColumn25 %></P>
<P>@csvColumn30  = <%= @csvColumn30 %></P>

<P>__CORRECTLY READS CSV IMPORTED MANNUALY AS ARRAY OF LINES/ROWS__</P>
<P>@correct CSV opne + read -   = <%= #read that variable

            @csvRead = CSV.read("./OurFormatTest.csv")

            
                %></P>
 <P>@correct CSV opne + LENGHT -   = <%##=   #@csvRead.length        %></P>

<P>@csvRead = CSV FOREACH  = <%##=###@csvRead.each do |row1|
  ### @csvColumn3 =  row1[2].inspect.gsub!('"', '') + @csvColumn3.to_s 
###end%></P>
<P>@csvColumn3 ARRAY = <%##=### @csvColumn3 %></P>

<P>__CORRECTLY READS CSV IMPORTED AUTOMATICALLY_</P>
<P>@correct CSV opne + read -   = <%##=#### #read that variable
### @file = open(Rails.root.to_s+'/FromFTP.csv').read
 ###@file = @file.gsub!('[[', '').gsub!('"', '').gsub!(']]', '')
 ###make the file the same as when manually add
          ###  @csvReadFTP = CSV.read( @file)
                %></P>
 <P>@correct CSV csvReadFTP + LENGHT -   = <%##=  #### @file.length        %></P>
 
 <P>@TEMP FTP FILE -   = <%= @tempFTP%></P>
  <P>@tempFTPPath -   = <%= @tempFTPPath%></P>
   <script>

   
   //Save to JS string
   //////var cookiesLabelsArrayStringC = '<%############=@cookeslabelsArray2%>';
   var labelsArrayStringC = '<%=@hardcodedURLsC%>';
   var labelsArrayStringDB = '<%=@hardcodedURLsDB%>';
   
   var csvArrayFTP = '<%=@csvArrayFTP%>';
   var csvArrayFTPFull = '<%=@csvReadFTP%>';
      //////console.log("labecookies label array string= "+cookiesLabelsArrayStringC);
      console.log("csvArrayFTP string= "+csvArrayFTP);
      console.log("csvArrayFTPFull  = "+csvArrayFTPFull);

   //Declare JS array
   var labelsArrayC;
   var labelsArrayDB;
  
      //////var cookiesLabelsArray;
   
 
  
  //Split the JS string into tan JS array
  labelsArrayC =  labelsArrayStringC.split("quot;");
  labelsArrayDB =  labelsArrayStringDB.split("quot;");
  

  
  console.log("label DB label array = "+labelsArrayDB);
   
     //////cookiesLabelsArrayC =  cookiesLabelsArrayStringC.split("quot;");
     
  //__________________________________________________________________________________________________________________________________
  //TRY getting info from cookies print and if true the runthis code
     //moving back to views - DEPLOYMENT - ************WORKS HEREE - Reads uptodate file
      //  var csvArrayOpen = '<%#= open('OurFormatTest.csv', 'r')%>';  
       // csvArrayOpen = '<%#= @file5JSx = open('https://label-gen-var3.herokuapp.com/uploads/resume/attachment/1/OurFormatTest.csv').read%>';
                 
    //console.log("csvArrayOpen = "+csvArrayOpen);
    
    //var csvReadJS = '<%#=CSV.read(@file5JSx)%>';
    
 
   /// var csvSingleForeachJS = '<%#####=CSV.read(@file5JSx)[1][3].inspect.gsub!('"', '')%>';
   ///  console.log("csvSingleForeachJS = "+csvSingleForeachJS);
     
     
    
    var csvForeachJS;
 
    var csvForeachJSReplace = csvReadJS.replace(/&quot;/g,'');
    console.log("csvForeachJS split = "+csvForeachJSReplace);
       var csvForeachJS = csvForeachJSReplace.split(",");
     console.log("csvForeachJS = "+csvForeachJS[2]);
     
     
 
/*     
  if(csvForeachJS.length >= 1){      
     //Open all the urls
   var j = 1;
   while (j < csvForeachJS.length){
       /// console.log("labels array------loop-------- = "+labelsArray[o].slice(0, -5));
       //var tempURL = labelsArray[o].slice(0, -5)
       var tempURLJS = csvForeachJS[j].slice(0, -1)
     window.open(tempURLJS, '_blank'); 
       j = j+ 2;
   }
   csvForeachJS = [];
  }
  */
   
  
     
     //COMMENT OUT BECAUSE THIS WILL BE CALLED ON CLICK MAKE IT A FUNCTION AN CALL INCLICK?
     var authorizeCall = '<%=
     
     xmlPayloadAuthorise = 
                '<?xml version="1.0" encoding="iso-8859-1"?>
                <Request>
                <User>'+@accountNumber+'</User>
                <Password>'+@password+'</Password>
                <Type>CUST</Type>
                </Request>'
                
                authorizeResponce = RestClient.post "https://papi.dpd.ie/common/api/authorize", xmlPayloadAuthorise, 
                {content_type: :xml, accept: :xml, authorization: 'Bearer '+@token+''}
                
                #parce the xml to get the access token
                xmlAuthorizeDoc  = Nokogiri::XML(authorizeResponce)
                #get the access token
                accessToken = xmlAuthorizeDoc.xpath("//AccessToken").text
                %>';
     //
     console.log("authorizeCall = "+authorizeCall);
     
     //cookies from JS to Ruby
     //set cookies
     //document.cookie = "A1=" +  csvForeachJS[0] +  ";";
 //var url='https://papi.dpd.ie/common/api/preadvice';
  var method = 'POST'
  
  const invocation = new XMLHttpRequest();
const url = 'https://papi.dpd.ie/common/api/preadvice';
const body = '<?xml version="1.0" encoding="iso-8859-1"?><PreAdvice><Consignment>'+
'<RecordID>1</RecordID><CustomerAccount>1111L1</CustomerAccount><DeliveryDepot>0</DeliveryDepot><Gazzed>1</Gazzed>'+
'<ConsignmentCreationDateTime>2017-12-15T09:03:17</ConsignmentCreationDateTime><GazzType>PreAdvice</GazzType><TrackingNumber>0</TrackingNumber>'+
'<TotalParcels>1</TotalParcels><Relabel>1</Relabel><ServiceOption>5</ServiceOption><ServiceType>1</ServiceType><DeliveryAddress>'+
'<Contact></Contact><ContactTelephone>090 6420500</ContactTelephone><ContactEmail>test@dpd.ie</ContactEmail><BusinessName>Test Name</BusinessName>'+
'<AddressLine1>Dublin Road</AddressLine1><AddressLine2>Business Park</AddressLine2><AddressLine3>Athlone</AddressLine3><AddressLine4>Westmeath</AddressLine4>'+
'<PostCode></PostCode><CountryCode>IE</CountryCode></DeliveryAddress><CollectionAddress><Contact>TM</Contact>'+
'<ContactTelephone>0906420500</ContactTelephone><ContactEmail>tomas.mroszczyk@dpd.ie</ContactEmail>'+
'<BusinessName>ADVANCED TECHNOLOGY PRODUCTS</BusinessName><AddressLine1>CORCANREE B/P</AddressLine1><AddressLine2>DOCK ROAD</AddressLine2>'+
'<AddressLine3>Limerick</AddressLine3><AddressLine4>Limerick</AddressLine4><PostCode></PostCode><CountryCode>IE</CountryCode>'+
'</CollectionAddress><ReturnAddress><Contact>David McG</Contact><ContactTelephone>0906420500</ContactTelephone>'+
'<ContactEmail>integrations@dpd.ie</ContactEmail><BusinessName>ADVANCED TECHNOLOGY PRODUCTS (WS)</BusinessName>'+
'<AddressLine1>CORCANREE B/P</AddressLine1><AddressLine2>DOCK ROAD</AddressLine2><AddressLine3>Limerick</AddressLine3>'+
'<AddressLine4>Limerick</AddressLine4><PostCode></PostCode><CountryCode>IE</CountryCode></ReturnAddress>'+
'<PackingList/><ParcelDetails/><References><Reference><ReferenceName></ReferenceName><ReferenceValue>100</ReferenceValue>'+
'<ParcelNumber>1</ParcelNumber></Reference></References><Notes/></Consignment></PreAdvice>';


 function gapiACL() {
      var xhr = new XMLHttpRequest();
      var requestURL = url; 
      var params = {role: "writer",
                      scope: {
                        type: "user",
                        value: "rosamesarina@gmail.com"         
                      }
                    };


       var paramsjasonString = JSON.stringify(params); // convert the javascript object to a Json string
       console.log("paramsjasonString = " + paramsjasonString);

      // xhr.open('POST', requestURL + '?access_token=' +authorizeCall, true );
       xhr.open('POST', requestURL , true );
       //xhr.withCredentials = true;
       // Specify the http content-type as json
       
        xhr.setRequestHeader(
         'Content-Type', 'application/xml');
         
        //xhr.setRequestHeader('Bearer ' + authorizeCall);
         //xhr.setRequestHeader('Authorization', 'Bearer '+authorizeCall);
         //xhr.setRequestHeader('X-PINGOTHER', 'pingpong');
          

       // Response handlers
       xhr.onload = function() {
         var responseText = xhr.responseText;
         console.log(responseText);
         // process the response.
       };

      xhr.onerror = function() {
        console.log('There was an error!');
      };
      xhr.send(body);


    }
    gapiACL();
    

function CallWebAPI() {
    var request_ = new XMLHttpRequest();        
    //var encodedParams = encodeURIComponent(params);
    request_.open("POST", url, true);
    request_.setRequestHeader("Authorization", "Bearer "+ authorizeCall);
    request_.send(body);
    request_.onreadystatechange = function () {
        if (request_.readyState == 4 && request_.status == 200) {
            var response = request_.responseText;
            var obj = JSON.parse(response); 
            // handle data as needed... 

        }
    }
}
//////////// CallWebAPI();

           
                //labelResponse = RestClient.post "https://papi.dpd.ie/common/api/preadvice", xmlPayloadAuthorised, 
               // {content_type: :xml, accept: :xml, authorization: "Bearer " + accessToken}

  
     
 ///  var preadviceCall = '<%##=   xmlPayloadAuthorised = 
                '<?xml version="1.0" encoding="iso-8859-1"?>
                <PreAdvice>
                    <Consignment>
                        <RecordID>'+ cookies[:A1]+  '</RecordID>
                        <AlertEmailAddress>'+ csvForeachJS[29] +  '</AlertEmailAddress>
                        <ConsignmentDescription>LG.124132D</ConsignmentDescription>
                        <ConsignmentDate>2018-12-03</ConsignmentDate>
                        <CustomerAccount>1111L1</CustomerAccount>
                        <DeliveryDepot>0</DeliveryDepot>
                        <Gazzed>0</Gazzed>
                        <GazzType>PreAdvice</GazzType>
                        <TrackingNumber>0</TrackingNumber>
                        <TotalParcels>1</TotalParcels>
                        <Relabel>1</Relabel>
                        <ServiceOption>5</ServiceOption>
                        <ServiceType>1</ServiceType>
                        <Weight>10</Weight>
                        <DeliveryAddress>
                            <Contact>'+ csvForeachJS[23] +'</Contact>
                            <ContactTelephone>'+csvForeachJS[24]  +'</ContactTelephone>
                            <ContactEmail>'+csvForeachJS[29] +'</ContactEmail>
                            <BusinessName>'+csvForeachJS[2] +'</BusinessName>
                            <AddressLine1>'+csvForeachJS[3]  +'</AddressLine1>
                            <AddressLine2>'+csvForeachJS[4] +'</AddressLine2>
                            <AddressLine3>'+csvForeachJS[5]  +'</AddressLine3>
                            <AddressLine4>'+csvForeachJS[6] +'</AddressLine4>
                            <PostCode>'+csvForeachJS[7] +'</PostCode>
                            <CountryCode>'+csvForeachJS[8] +'</CountryCode>
                        </DeliveryAddress>
                        <CollectionAddress>
                           <Contact>'+ csvForeachJS[23] +'</Contact>
                            <ContactTelephone>'+csvForeachJS[24]  +'</ContactTelephone>
                            <ContactEmail>'+csvForeachJS[29] +'</ContactEmail>
                            <BusinessName>'+csvForeachJS[2] +'</BusinessName>
                            <AddressLine1>'+csvForeachJS[3]  +'</AddressLine1>
                            <AddressLine2>'+csvForeachJS[4] +'</AddressLine2>
                            <AddressLine3>'+csvForeachJS[5]  +'</AddressLine3>
                            <AddressLine4>'+csvForeachJS[6] +'</AddressLine4>
                            <PostCode>'+csvForeachJS[7] +'</PostCode>
                            <CountryCode>'+csvForeachJS[8] +'</CountryCode>
                        </CollectionAddress>
                        <References>
                            <Reference>
                                <ReferenceName>name</ReferenceName>
                                <ReferenceValue>'+csvForeachJS[25] +'</ReferenceValue>
                                <ParcelNumber>1</ParcelNumber>
                            </Reference>
                            <Reference>
                                <ReferenceName>ref3</ReferenceName>
                                <ReferenceValue>'+csvForeachJS[26] +'</ReferenceValue>
                                <ParcelNumber>2</ParcelNumber>
                            </Reference>
                        </References>
                    </Consignment>
                </PreAdvice>'
                
                labelResponse = RestClient.post "https://papi.dpd.ie/common/api/preadvice", xmlPayloadAuthorised, 
                {content_type: :xml, accept: :xml, authorization: "Bearer " + accessToken}
                
                #parce the xml to get the access token
                xmlLabelDoc  = Nokogiri::XML(labelResponse)
                #get the access token
                @labelURI = xmlLabelDoc.xpath("//LabelImage").text
                
                @responseXML = xmlLabelDoc
                 %>';
     //
     //console.log("preadviceCall = "+preadviceCall);
     
/*     
    
     //Open all the urls
   var d = 1;
   while (d < labelsArrayDB.length){
       /// console.log("labels array------loop-------- = "+labelsArray[o].slice(0, -5));
       //var tempURL = labelsArray[o].slice(0, -5)
       var tempURLDB = labelsArrayDB[d].slice(0, -1)
     window.open(tempURLDB, '_blank'); 
       d = d+ 2;
   }
   
  */
  /*
   //Open all the urls
   var c = 1;
   while (c < cookiesLabelsArrayC.length){
       /// console.log("labels array------loop-------- = "+labelsArray[o].slice(0, -5));
       //var tempURL = labelsArray[o].slice(0, -5)
       var cookiesTempURLC = cookiesLabelsArrayC[c].slice(0, -1)
     window.open(cookiesTempURLC, '_blank'); 
       c = c+ 2;
   }
   */
   
 
/*
   //Open all the urls
   var o = 1;
   while (o < labelsArrayC.length){
       /// console.log("labels array------loop-------- = "+labelsArray[o].slice(0, -5));
       //var tempURL = labelsArray[o].slice(0, -5)
       var tempURLC = labelsArrayC[o].slice(0, -1)
    window.open(tempURLC, '_blank'); 
       o = o+ 2;
   }
 
*/   

   //FUNCTION - OPENS ALL LABEL URLS
    function printLabels(){
        console.log("clicked print labels button**");
        //reload before print so that lates file is loaded
         document.cookie = "print=true;";
        location.reload();


        }
        
        
        
</script>

<%=
        @print = cookies[:print]
        unless @print.nil?
            if cookies[:print] == 'true'
           
            
         end     
  end
%>

<%#= render "login" %>
<%## email = <DPD Account Number><API Setup Password><Base64 Token><@dpd.ie> %>

<p<%= @accountNumber = @email[0, 6] %></p>
<p><%= @password = @email[6, 10] %></p>
<p><%= @token = @email[16..-8] %></p>
<!--
-->

<%###only for the initial deployment to Heroku DELETE %>
<%#= @accountNumber = '5287L9' %>
<%#= @password = 'db44t66Dat' %>
<%#= @token = 'R3JlZW5JVDpHcmVlbklUUGFzc3cwcmQyMDE4' %>


<%#= render "button" %>



<div class="container">
  <div class="row">
    <label class=" float-right">
      <h3>Print All Labels</h3>
      <button id ="print" class ="btn btn-print btn-lg " onclick="printLabels()">Print Labels</button>
    </label>
        
        
    <h3 id="ftpText"></h3>
    <br>
    <label class="switch">
      <br>
      <input type="checkbox" id="slider" onchange="isFTP()" >
      <span class="slider round"></span>
    </label>
  </div>
</div>
<hr />

<div class="container">
  <div class="row">
    <div class="purple-box u-padding-Al">
      <center>
         <h3>Local File Upload</h3>
         <%= render "upload" %>
      </center>
    </div>
    <hr />
  </div>
  

<br />
<%= button_to "File Mapping", new_mapping_path, class: "btn btn-primary"  %>
   

  <div class="row">
    <div class="col-md-12">

<%#DELETE%>        
<%###@isFtp = true%>
<%###@isFtp2 = true%>  
<%###@isFtp = true%>  
<%#DELETE%>  

     
        

<%#####if cookies[:print] == 'true'%> 
<%######=
     
                #Read from FTP__________________________________________
                ftp = Net::FTP::new("ftp.dpd.ie")
                ftp.login("3L4", "3l4123")
                ftp.chdir("/users/3L4/WebAppImport")
                ## files = ftp.list
                ftp.passive = true
                ##file is downloaded from ftp to a local folder name "FromFTP"
                ftp.getbinaryfile("OurFormatEmailVadimTest.csv", "FromFTP")
                #tgz = ftp.list("ruby-*.tar.gz").sort.last
                #print "the latest version is ", tgz, "\n"
                #ftp.getbinaryfile(tgz, tgz)
                ftp.close
        
              
          
                # If on LOCAL_____________________________________________________________________________________________________
                if  @isFTP2.isFTP == false                    ############ORIGINAL LINE  isFtp.isFTP == false    
                    #if on DEVELOPMENT LOCAL-----------------------------------------------
                    ###CHANGE LATER
                    if @deployment == false
                        @debug3 = true
                          @csvFileLocationOpen = open('https://label-gen-var2.herokuapp.com/uploads/resume/attachment/1/OurFormatTest.csv')
                        open('OurFormatTest.csv', 'wb') do |file|
                           file << open('https://label-gen-var2.herokuapp.com/uploads/resume/attachment/1/OurFormatTest.csv').read
                           @file5 = file
                           
                         end
                 
                

            #read that variable
          ###  @csvRead = CSV.read(@file5)
          ####  @csvLenght = @csvRead.length
        
            else
                @debug11 = true
                @print = false
                
                cookies[:print] = "false" 
            
            end
                 
         @debug12 = true      
   end   

  ###  end
%>             
   <script>
   var csvRead2JS =  '<%=@csvRead%>'; 
 console.log("csvRead2JS = "+csvRead2JS);
 /*  
   var cname = 'print';  function getCookie(cname) {
  var name = cname + "=";
  var decodedCookie = decodeURIComponent(document.cookie);
  var ca = decodedCookie.split(';');
  for(var i = 0; i <ca.length; i++) {
    var c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length);
    }
  }
  return "";
}  

var printCookieJS = getCookie(cname); 
 console.log("printCookieJS = "+printCookieJS);
 */

   var labelsArray2JSRuby = '<%=@labelsArray2%>';
   console.log("labelsArray2JSRuby= " + labelsArray2JSRuby);
   var labelsString2JS;
    var labelsArray2JS;
    // if(printCookieJS == 'true'){
     //labelsArray2JS = labelsArray2JS.split("quot;");
  //console.log("label DB label array labelsArray2JS= "+labelsArray2JS); 
  labelsString2JS = labelsArray2JSRuby.replace(/&quot;/g,'');
    console.log("labelsString2JS split = "+labelsString2JS);
       var labelsArray2JS = labelsString2JS.split(",");
     console.log("labelsArray2JS = "+labelsArray2JS);
     console.log("labelsArray2JS.length = "+labelsArray2JS.length);

/*  
  if(labelsArray2JS.length >= 1){      
     //Open all the urls
   var j = 1;
   while (j < labelsArray2JS.length){
       /// console.log("labels array------loop-------- = "+labelsArray[o].slice(0, -5));
       //var tempURL = labelsArray[o].slice(0, -5)
       var tempURLJS = labelsArray2JS[j].slice(0, -1)
     window.open(tempURLJS, '_blank'); 
       j = j+ 2;
   }
  }
   */
  
//  }
 
 </script> 

<%end%>  
 
 <script>
    var statusFTP = '<%=@isFTP2.isFTP%>'; 
  console.log("isFTP STATUS= " + statusFTP);
//empty an array at the beginning
var labelsArray = [];

var isFtp = '<%=@isFtp%>';

 </script>

</head>
<body>
<%
@isFTP2 = @isFTP2.isFTP
%>
<script>
 var isFTP2 = '<%=@isFTP2%>';
 var debug = '<%=@debug%>';
 console.log("debug="+debug);
</script>


<%#first check the value of what checkbox should be%>
<script>

     console.log('this is first isFTP2 var ' + isFTP2);
    if (isFTP2 == 'false'){
        document.getElementById("slider").checked = false;
        ftpText.innerText = "Local Import is ON";
     
    }
    else if (isFTP2 == 'true'){
        document.getElementById("slider").checked = true;
         ftpText.innerText = "FTP Import is ON";
    }
  

    </script>


    <script>
  
    console.log(slider);
    
    function isFTP (){  
        var slider=document.getElementById("slider").checked;
        if (slider==false){
              console.log(slider);
            
      document.cookie = "cl=" + slider +  ";";
        location.reload();
        }
        else if (slider==true){
            document.cookie = "cl=" + slider +  ";";
              location.reload();
        }
        //document.getElementById("slider").value = false;
      
    
        }
    
</script>

<br>
<br>
<br>
<br>



            <!--
      
  
  
<!--___________________________________________________________________________ uncomment ALL to auto download the labels-->

<h3>XML Response</h3>
<br>
    <p><%=@responseXML%></p>
<script>
function print(){
    consosle.log("print");
}


//save a array now to attach one by one and then at the end run script to print an array ech element - make an array of urls and then call all the array until lenght

//get the array of labels URLs and push to an array

//if (labelUri.length < 50) {
//    var my_window = window.open('<%####= @labelURI %>', '_blank');
// }
 </script>
<!--___________________________________________________________________________ uncomment ALL to auto download the labels--> 
 


<%#= creates a label link/button for each label%>
<%#= link_to "LABEL",@labelURI,  :class => "a", :target => "_blank"%>
                                          
                                     <!--
<%
@labelURI
# link_to labelURI, target: :_blank 

%>


      
<%= button_to 'Press me',:controller => :welcome, :action => :button %>
<p><%= @button %></p>
 <script>
       
             var btn = '<%=@button %>'; 
               console.log(btn);
                 
           </script>
<%= 

#submit_tag("Checkout"), onclick: "print();"

#doc = Nokogiri::HTML(open("http://www.threescompany.com"))
#doc = Nokogiri::HTML(open(labelURI))
%>         
      <center>
        <ul class="no-bullet">
          <%# @bulletin_list.each do |bulletin| %>
            <li>
              <%# if bulletin.attachment.previewable? %>
                <%#= link_to(image_tag(bulletin.attachment.preview(resize: "200x200>")),  rails_blob_path(bulletin.attachment, disposition: "attachment"))
                #%>
              <%# elsif bulletin.attachment.variable? %>
                <%#= link_to(image_tag(bulletin.attachment.variant(resize: "200x200")), rails_blob_path(bulletin.attachment, disposition: "attachment"))%>
              <%# else %>
                <%#= link_to "Download file", rails_blob_path(bulletin.attachment, disposition: "attachment") %>
              <%# end %>
            </li>
          <%# end %>
        </ul>
      </center>
    </div>
  </div> <!-- row -->
</div>



        <%else%>
        
       <%######## end%>
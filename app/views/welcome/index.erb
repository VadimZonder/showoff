<% 
require 'csv' 
require 'net/ftp'
require 'tempfile'
require "open-uri"
%>

<% if user_signed_in?  %>

<%########URLs from controller with all the labels %>
<%=@hardcodedURLsC = @labelsArray2%>
<P>enabling to print = <%=@print%></P>
<P>deployment status = <%=@deployment%></P>
<P>deployment status = <%=@deployment%></P>
   <script>
   //Save to JS string
   var labelsArrayStringC = '<%=@hardcodedURLsC%>';

   //Declare JS array
   var labelsArrayC;
  
  //Split the JS string into tan JS array
  labelsArrayC =  labelsArrayStringC.split("quot;");
   
   //Open all the urls
   var o = 1;
   while (o < labelsArrayC.length){
       /// console.log("labels array------loop-------- = "+labelsArray[o].slice(0, -5));
       //var tempURL = labelsArray[o].slice(0, -5)
       var tempURLC = labelsArrayC[o].slice(0, -1)
     window.open(tempURLC, '_blank'); 
       o = o+ 2;
   }

   //OPENS ALL LABEL URLS
    function printLabels(){
        console.log("clicked print labels button**");
        //reload before print so that lates file is loaded
         document.cookie = "print=true;";
       location.reload();


        }
        
</script>


<%
##Development or Deployment
@url =  request.original_url
if @url.include? 'c9users.io' 
    @deployment = false
else
    @deployment = true
end
%>

<%#= render "login" %>
<%## email = <DPD Account Number><API Setup Password><Base64 Token><@dpd.ie> %>
<!--
<p<%= @accountNumber = @email[0, 6] %></p>
<p><%= @password = @email[6, 10] %></p>
<p><%= @token = @email[16..-8] %></p>
-->

<%###only for the initial deployment to Heroku DELETE %>
<%#= @accountNumber = '5287L9' %>
<%#= @password = 'db44t66Dat' %>
<%#= @token = 'R3JlZW5JVDpHcmVlbklUUGFzc3cwcmQyMDE4' %>


<%#= render "button" %>



<div class="container">
  <div class="row">
    <label class=" float-right">
      <h3>Print All Labels</h3>
      <button id ="print" class ="btn btn-print btn-lg " onclick="printLabels()">Print Labels</button>
    </label>
        
        
    <h3 id="ftpText"></h3>
    <br>
    <label class="switch">
      <br>
      <input type="checkbox" id="slider" onchange="isFTP()" >
      <span class="slider round"></span>
    </label>
  </div>
</div>
<hr />

<div class="container">
  <div class="row">
    <div class="purple-box u-padding-Al">
      <center>
         <h3>Local File Upload</h3>
         <%= render "upload" %>
      </center>
    </div>
    <hr />
  </div>
  

<br />
<%= button_to "File Mapping", new_mapping_path, class: "btn btn-primary"  %>
   

  <div class="row">
    <div class="col-md-12">

<%#DELETE%>        
<%###@isFtp = true%>
<%###@isFtp2 = true%>  
<%###@isFtp = true%>  
<%#DELETE%>  

     
        


   <script>
  
    var statusFTP = '<%=@isFTP2.isFTP%>'; 
  console.log("isFTP STATUS= " + statusFTP);
//empty an array at the beginning
var labelsArray = [];

var isFtp = '<%=@isFtp%>';

 </script>

</head>
<body>
<%
@isFTP2 = @isFTP2.isFTP
%>
<script>
 var isFTP2 = '<%=@isFTP2%>';
 var debug = '<%=@debug%>';
 console.log("debug="+debug);
</script>


<%#first check the value of what checkbox should be%>
<script>

     console.log('this is first isFTP2 var ' + isFTP2);
    if (isFTP2 == 'false'){
        document.getElementById("slider").checked = false;
        ftpText.innerText = "Local Import is ON";
     
    }
    else if (isFTP2 == 'true'){
        document.getElementById("slider").checked = true;
         ftpText.innerText = "FTP Import is ON";
    }
  

    </script>


    <script>
  
    console.log(slider);
    
    function isFTP (){  
        var slider=document.getElementById("slider").checked;
        if (slider==false){
              console.log(slider);
            
      document.cookie = "cl=" + slider +  ";";
        location.reload();
        }
        else if (slider==true){
            document.cookie = "cl=" + slider +  ";";
              location.reload();
        }
        //document.getElementById("slider").value = false;
      
    
        }
    
</script>

<br>
<br>
<br>
<br>



            <!--
      
  
     <%
         
        
       isFtp = IsFTp.last ############ORIGINAL LINE    isFtp = IsFTp.last
        

#Read from FTP
ftp = Net::FTP::new("ftp.dpd.ie")
ftp.login("3L4", "3l4123")
ftp.chdir("/users/3L4/WebAppImport")

  files = ftp.list

  ftp.passive = true
  ##file is downloaded from ftp to a local folder name "FromFTP"
   ftp.getbinaryfile("OurFormatEmailVadimTest.csv", "FromFTP")




#tgz = ftp.list("ruby-*.tar.gz").sort.last
#print "the latest version is ", tgz, "\n"
#ftp.getbinaryfile(tgz, tgz)
ftp.close

=begin 

#Upload to FTP
ftp = Net::FTP::new("ftp.dpd.ie")
ftp.login("3L4", "3l4123")
ftp.chdir("/users/3L4/WebAppImport")



  ftp.passive = true
  #ftp.putbinaryfile('Gemfile')
 # tempfile = Tempfile.new('test')
  #tempfile.write("This is some text data I want to upload via FTP.")
  #my_data = "This is some text data I want to upload via FTP."
 # my_data = Bulletin.last
 # tempfile.puts my_data
 # ftp.putbinaryfile(tempfile)


# name_start = 'my_special_file'
#name_end = '.txt'
#location = '/path/to/some/dir'
options = { encoding: Encoding::UTF_8 }
#tempfile = Tempfile.new([name_start, name_end],  options) do |file|
# file.write('Hello, tempfile!')
#end

tempfile = Tempfile.new(['test', '.csv'], options)
#tempfile.write("22This is some text data I want to upload via FTP.")

#get the link of the file
##tempfile.write(@bulletin2 =   rails_blob_path(Bulletin.last.attachment))

#@bulletin2 = Bulletin.last.attachment.variant, rails_blob_path( Bulletin.last.attachment, disposition: "attachment")
#@bulletin2 = File.read(rails_blob_path(Bulletin.last.attachment))


#@open_uri = open(rails_blob_path(Bulletin.last.attachment))
@csvFileLocation3 = open('https://api-to-labels-base-vadimmalakhovski.c9users.io'+rails_blob_path(Bulletin.last.attachment))
######@csvFileLocation3 = open('https://label-gen-is-ftp.herokuapp.com'+rails_blob_path(Bulletin.last.attachment))
open('OurFormatTest.csv', 'wb') do |file|
  file << open('https://api-to-labels-base-vadimmalakhovski.c9users.io'+rails_blob_path(Bulletin.last.attachment)).read
 ##### file << open('https://label-gen-is-ftp.herokuapp.com'+rails_blob_path(Bulletin.last.attachment)).read
  @file = file
end

@bulletin3 = CSV.read(@file)
##@csvFileLocation2 = rails_blob_path(Bulletin.last.attachment, disposition: "attachment")
##@bulletin2 = CSV.read(@csvFileLocation2.chomp("/*")) 

#@csvFileLocation2 =  File.open('/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBCZz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--4426c02a8060d8ac6f3ea960420e0a1417f330f0/OurFormatTest.csv')
#@csvFileLocation2 =  'https://api-to-labels-base-vadimmalakhovski.c9users.io/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBCZz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--4426c02a8060d8ac6f3ea960420e0a1417f330f0/OurFormatTest.csv?disposition=attachment'


tempfile.write(@bulletin3)

#link_to "Download my", rails_blob_path(Bulletin.last.attachment, disposition: "attachment")

#@bulletin2 = File.read(rails_blob_path(@bulletin_list.last.attachment, disposition: "attachment"))
#tempfile.write(@bulletin2 = Bulletin.last.attachment)
#tempfile.write(@bulletin2 = Bulletin.order(created_at: :desc).all)
#tempfile.write(@bulletin2 = File.read(rails_blob_path(bulletin.attachment)))

#= link_to(image_tag(bulletin.attachment.variant(resize: "200x200")), rails_blob_path(bulletin.attachment, disposition: "attachment"))
#= link_to "Download file", rails_blob_path(bulletin.attachment, disposition: "attachment")


tempfile.rewind
ftp.putbinaryfile(tempfile)
  
  @bulletin3  = tempfile.read
  
  tempfile.unlink





ftp.close
tempfile.close

=end
%>

<%=@file %>
        
            -->
            <script>
 var ftp = '<%=@ftpRead%>';
 console.log('====' + ftp);
</script>
<!--
      
  
<%# If on LOCAL_____________________________________________________________________________________________________%>
<%if    isFtp.isFTP== false                    ############ORIGINAL LINE  isFtp.isFTP == false %>      
      <p>Go to thos directory-------------</p>
       <%############ @storage = Dir["/home/ubuntu/workspace/storage/*"]%>
       <p>gets an array of folders-------------</p>
       <%#= gets and array of folders%>
        <%############### @storage.select do |directory|
        ###############@foldersArray = directory
        ##############end%>
         <p>Splits the array by the comma delimiter-------------</p>
         <%#= splits all the paths of folders to an arrayy%>
          <%##############=@foldersArray = @foldersArray.split(',')%>
          <p> getting first array, adding to search everything in that folder and  rid of quotes-------------</p>
          <%#= getting first array, adding to search everything in that folder and  rid of quotes%>
          <%##############=@foldersArray= @foldersArray[0].to_s+ '/*'.chomp('"').chomp('"') %>
           <p>if that first array is not empty run: go to the next folder, take the first file, and take the quotes out-------------</p>
            <%##############= Dir[@foldersArray+'/*']%>
     
          ###########=if Dir[@foldersArray].empty?
      ########    'yes'
                   ########### else
                      ########### @csvFileLocation = Dir[@foldersArray+'/*']
                    ###########    @csvFileLocation =@csvFileLocation [0].to_s+ '/*'.chomp('"').chomp('"')
            #customers = CSV.read(@csvFileLocation.chomp("/*")  )
             # Dir.entries("/home/ubuntu/workspace/storage/AE/bt/AEbtNbAYiVDqXyDMzN8oj9YE")
                   ########### 'no'
                   ########### end
                  end %>
          
          
                 <p>Read the .csv file</p>
      <%####  customers = CSV.read(@csvFileLocation.chomp("/*")) %>
      <%#######################= @csvFileLocation =  './public' + Resume.last.attachment.to_s%>
        <%#################  customers = CSV.read(@csvFileLocation.chomp("/*")) %>
           
          <%
 #if on DEVELOPMENT LOCAL-----------------------------------------------
          if @deployment == false
              #get the 1st and the only file location where the file is stored
              @csvFileLocationOpen = open('https://api-to-labels-base-vadimmalakhovski.c9users.io/uploads/resume/attachment/1/OurFormatTest.csv')
              #open each line and save it to a variable
                  open('OurFormatTest.csv', 'wb') do |file|
                   file << open('https://api-to-labels-base-vadimmalakhovski.c9users.io/uploads/resume/attachment/1/OurFormatTest.csv').read
                   #Resume.last.attachment.to_s
                   @file5 = file
                 end
                 #read that variable
                 @csvRead = CSV.read(@file5)
                 
                 #read ech column and save it to a variable
                   CSV.foreach(@file5) do |row1|
@csvColumn1 =  row1[0].inspect.gsub!('"', '') #+  @csvRow1.inspect 
@csvColumn2 =  row1[1].inspect.gsub!('"', '') 
@csvColumn3 =  row1[2].inspect.gsub!('"', '') 
@csvColumn4 =  row1[3].inspect.gsub!('"', '') 
@csvColumn5 =  row1[4].inspect.gsub!('"', '') 
@csvColumn6 =  row1[5].inspect.gsub!('"', '')  
@csvColumn7 =  row1[6].inspect.gsub!('"', '')  
@csvColumn8 =  row1[7].inspect.gsub!('"', '')  
@csvColumn9 =  row1[8].inspect.gsub!('"', '')  
@csvColumn10 =  row1[9].inspect.gsub!('"', '')  
@csvColumn11 =  row1[10].inspect.gsub!('"', '')  
@csvColumn12 =  row1[11].inspect.gsub!('"', '')  
@csvColumn13 =  row1[12].inspect.gsub!('"', '')  
@csvColumn14 =  row1[13].inspect.gsub!('"', '')  
@csvColumn24 =  row1[23].inspect.gsub!('"', '')  
@csvColumn25 =  row1[24].inspect.gsub!('"', '')  
@csvColumn26 =  row1[25].inspect.gsub!('"', '')  
@csvColumn27 =  row1[26].inspect.gsub!('"', '') 
@csvColumn30 =  row1[29].inspect.gsub!('"', '')  
@csvColumn31 =  row1[30].inspect.gsub!('"', '')  
@csvColumn32 =  row1[31].inspect.gsub!('"', '')  
end
%>



<%
#IF ON DEPLOYMENT LOCAL----------------------------------------------------
          else
              ###not a problem -  there are less Resume entries on deployment than development but the ids are the same
              @csvFileLocationOpen = open('https://label-gen-is-ftp.herokuapp.com/uploads/resume/attachment/1/OurFormatTest.csv')
                  open('OurFormatTest.csv', 'wb') do |file|
                   file << open('https://label-gen-is-ftp.herokuapp.com/uploads/resume/attachment/1/OurFormatTest.csv').read
                   @file5 = file
                 end
                 #read that variable
                 @csvRead = CSV.read(@file5)
                 
                 #read ech column and save it to a variable
                   CSV.foreach(@file5) do |row1|
@csvColumn1 =  row1[0].inspect.gsub!('"', '') #+  @csvRow1.inspect 
@csvColumn2 =  row1[1].inspect.gsub!('"', '') 
@csvColumn3 =  row1[2].inspect.gsub!('"', '') 
@csvColumn4 =  row1[3].inspect.gsub!('"', '') 
@csvColumn5 =  row1[4].inspect.gsub!('"', '') 
@csvColumn6 =  row1[5].inspect.gsub!('"', '')  
@csvColumn7 =  row1[6].inspect.gsub!('"', '')  
@csvColumn8 =  row1[7].inspect.gsub!('"', '')  
@csvColumn9 =  row1[8].inspect.gsub!('"', '')  
@csvColumn10 =  row1[9].inspect.gsub!('"', '')  
@csvColumn11 =  row1[10].inspect.gsub!('"', '')  
@csvColumn12 =  row1[11].inspect.gsub!('"', '')  
@csvColumn13 =  row1[12].inspect.gsub!('"', '')  
@csvColumn14 =  row1[13].inspect.gsub!('"', '')  
@csvColumn24 =  row1[23].inspect.gsub!('"', '')  
@csvColumn25 =  row1[24].inspect.gsub!('"', '')  
@csvColumn26 =  row1[25].inspect.gsub!('"', '')  
@csvColumn27 =  row1[26].inspect.gsub!('"', '') 
@csvColumn30 =  row1[29].inspect.gsub!('"', '')  
@csvColumn31 =  row1[30].inspect.gsub!('"', '')  
@csvColumn32 =  row1[31].inspect.gsub!('"', '')  
end
              
          end
          
    %>
    

 IF on FTP DEV + DEPL all is ONE------------------------------------------------------------------------------------------------------        
          <%else%>
           <% ###login to ftp %>
           
           

           
           
            <%  @csvFileLocation =  './FromFTP' %>
          <%  customers = CSV.read(@csvFileLocation.chomp("/*")) %>
          
          
             <%CSV.foreach(@csvFileLocation.chomp("/*")) do |row1|
@csvColumn1 =  row1[0].inspect.gsub!('"', '') #+  @csvRow1.inspect 
@csvColumn2 =  row1[1].inspect.gsub!('"', '') 
@csvColumn3 =  row1[2].inspect.gsub!('"', '') 
@csvColumn4 =  row1[3].inspect.gsub!('"', '') 
@csvColumn5 =  row1[4].inspect.gsub!('"', '') 
@csvColumn6 =  row1[5].inspect.gsub!('"', '')  
@csvColumn7 =  row1[6].inspect.gsub!('"', '')  
@csvColumn8 =  row1[7].inspect.gsub!('"', '')  
@csvColumn9 =  row1[8].inspect.gsub!('"', '')  
@csvColumn10 =  row1[9].inspect.gsub!('"', '')  
@csvColumn11 =  row1[10].inspect.gsub!('"', '')  
@csvColumn12 =  row1[11].inspect.gsub!('"', '')  
@csvColumn13 =  row1[12].inspect.gsub!('"', '')  
@csvColumn14 =  row1[13].inspect.gsub!('"', '')  
@csvColumn24 =  row1[23].inspect.gsub!('"', '')  
@csvColumn25 =  row1[24].inspect.gsub!('"', '')  
@csvColumn26 =  row1[25].inspect.gsub!('"', '')  
@csvColumn27 =  row1[26].inspect.gsub!('"', '') 
@csvColumn30 =  row1[29].inspect.gsub!('"', '')  
@csvColumn31 =  row1[30].inspect.gsub!('"', '')  
@csvColumn32 =  row1[31].inspect.gsub!('"', '')  


end
%>


          
     <%end%>  
          
      

  

<%
 #save all entrie from reading .csv into an array
 @mapping_array = [@csvColumn1,  @csvColumn2,  @csvColumn3,  @csvColumn4, 
                   @csvColumn5,  @csvColumn6,  @csvColumn7,  @csvColumn8,
                   @csvColumn9,  @csvColumn10, @csvColumn11, @csvColumn12, 
                   @csvColumn13, @csvColumn14, @csvColumn15, @csvColumn16,
                   @csvColumn17, @csvColumn18, @csvColumn19, @csvColumn20,
                   @csvColumn21, @csvColumn22, @csvColumn23, @csvColumn24, 
                   @csvColumn25, @csvColumn26, @csvColumn27, @csvColumn28,  
                   @csvColumn29, @csvColumn30, @csvColumn31, @csvColumn32, 
                   @csvColumn33, @csvColumn34, @csvColumn35, @csvColumn36,
                   @csvColumn37, @csvColumn38, @csvColumn39, @csvColumn40,
                   @csvColumn41, @csvColumn42, @csvColumn43, @csvColumn44,
                   @csvColumn45, @csvColumn46, @csvColumn47, @csvColumn48, 
                   @csvColumn49, @csvColumn50]
                   
  #user_input_mapping = change all to integers
  ##########################ORIGINAL
  a = @a1
  b = @b2
  c = @c3
  d = @d4
  e = @e5
  f = @f6
  g = @g7
  h = @h8
  i = @i9
  j = @j10
  
  k = @k11
  l = @l12
  m = @m13
  n = @n14
  o= @o15 
  p = @p16
  q= @q17
  r= @r18
  s= @s19
  t= @t20
    
  u= @u21
  v= @v22
  w= @w23
  x = @x24
  y = @y25
  z = @z26
  aa = @aa27
  ab= @ab28
  ac= @ac29
  
    ad = @ad30
    ae = @ae31
    af = @af32
    ag= @ag33
    ah= @ah34
    ai= @ai35
    aj= @aj36
    ak= @ak37
    al= @al38
    am= @am39
    an= @an40
    
    ao= @ao41
    ap= @ap42
    aq= @aq43
    ar= @ar44
    as= @as45
    at= @at46
    au= @au47
    av= @av48
    aw= @aw49
    ax= @ax50
  
  
  ##############before mapping db (fi import file is in our format) + make full 50 letters
=begin  
  a = 1
  b = 2
  c = 3
  d = 4
  e = 5
  f = 6
  g = 7
  h = 8
  i = 9
  j = 10
  k = 11
  l = 12
  m = 13
  n = 14
  x = 24
  y = 25
  z = 26
  aa = 27
  ad = 30
  ae = 31
  af = 32
=end  
 %>
 
 
 <%


#response = RestClient::Request.execute(
#RestClient.post 'https://papi.dpd.ie/common/api/authorize',{"User":"3062L3", "Password":"wgBhsMr6EP", "Type":"CUST"} 
#ENV['SSL_CERT_FILE'] = /cacert.pem
require 'open-uri'
require 'rest-client'

#get the authorise token
xmlPayloadAuthorise = 
'<?xml version="1.0" encoding="iso-8859-1"?>
<Request>
<User>'+@accountNumber+'</User>
<Password>'+@password+'</Password>
<Type>CUST</Type>
</Request>'

authorizeResponce = RestClient.post "https://papi.dpd.ie/common/api/authorize", xmlPayloadAuthorise, 
{content_type: :xml, accept: :xml, authorization: 'Bearer '+@token+''}

%>
<%
#parce the xml to get the access token
xmlAuthorizeDoc  = Nokogiri::XML(authorizeResponce)
#get the access token
accessToken = xmlAuthorizeDoc.xpath("//AccessToken").text

%>
<br>

<p>works here1</p>

<%######___________________________________MAPPING AN ARRAY_________________________________%> 
<%=@mapping_array[@xml_input_d.to_i-1]%>

<%@A1 = @mapping_array[a-1]%>,
<%=@A1= @A1.to_s%>

<%@C3 = @mapping_array[c-1]%>
<%=@C3= @C3.to_s%>

<%@D4 = @mapping_array[d-1]%>
<%@D4= @D4.to_s%>

<%@E5 = @mapping_array[e-1]%>
<%=@E5= @E5.to_s%>

<%@F6 = @mapping_array[f-1]%>
<%=@F6= @F6.to_s%>

<%=@G7 = @mapping_array[g-1]%>
<%=@G7= @G7.to_s%>

<%=@H8 = @mapping_array[h-1]%>
<%=@H8= @H8.to_s%>


<%=@I9 = @mapping_array[i-1]%>
<%=@I9= @I9.to_s%>

<%=@J10 = @mapping_array[j-1]%>
<%=@J10= @J10.to_s%>

<%=@K11 = @mapping_array[k-1]%>
<%=@K11= @K11.to_s%>

<%=@L12 = @mapping_array[l-1]%>
<%=@L12= @L12.to_s%>

<%=@M13 = @mapping_array[g-1]%>
<%=@M13= @M13.to_s%>

<%=@N14 = @mapping_array[m-1]%>
<%=@N14= @N14.to_s%>



<%@X24 = @mapping_array[x-1]%>,
<%=@X24= @X24.to_s%>

<%@Y25 = @mapping_array[y-1]%>,
<%=@Y25= @Y25.to_s%>

<%@Z26 = @mapping_array[z-1]%>,
<%=@Z26= @Z26.to_s%>

<%@AA27 = @mapping_array[aa-1]%>,
<%=@AA27= @AA27.to_s%>

<%@AD30 = @mapping_array[ad-1]%>,
<%=@AD30= @AD30.to_s%>



<p>works here</p>

<%

                   
  #user_input_mapping = change all to integers

  
 
xmlPayloadAuthorised = 
'<?xml version="1.0" encoding="iso-8859-1"?>
<PreAdvice>
    <Consignment>
        <RecordID>'+ @A1 +  '</RecordID>
        <AlertEmailAddress>'+ @AD30 +  '</AlertEmailAddress>
        <ConsignmentDescription>LG.124132D</ConsignmentDescription>
        <ConsignmentDate>2018-12-03</ConsignmentDate>
        <CustomerAccount>1111L1</CustomerAccount>
        <DeliveryDepot>0</DeliveryDepot>
        <Gazzed>0</Gazzed>
        <GazzType>PreAdvice</GazzType>
        <TrackingNumber>0</TrackingNumber>
        <TotalParcels>1</TotalParcels>
        <Relabel>1</Relabel>
        <ServiceOption>5</ServiceOption>
        <ServiceType>1</ServiceType>
        <Weight>10</Weight>
        <DeliveryAddress>
            <Contact>'+@X24  +'</Contact>
            <ContactTelephone>'+@Y25  +'</ContactTelephone>
            <ContactEmail>'+@AD30  +'</ContactEmail>
            <BusinessName>'+@C3  +'</BusinessName>
            <AddressLine1>'+@D4  +'</AddressLine1>
            <AddressLine2>'+@E5  +'</AddressLine2>
            <AddressLine3>'+@F6  +'</AddressLine3>
            <AddressLine4>'+@G7 +'</AddressLine4>
            <PostCode>'+@H8 +'</PostCode>
            <CountryCode>'+@I9 +'</CountryCode>
        </DeliveryAddress>
        <CollectionAddress>
           <Contact>'+@X24  +'</Contact>
            <ContactTelephone>'+@Y25  +'</ContactTelephone>
            <ContactEmail>'+@AD30  +'</ContactEmail>
            <BusinessName>'+@C3  +'</BusinessName>
            <AddressLine1>'+@D4  +'</AddressLine1>
            <AddressLine2>'+@E5  +'</AddressLine2>
            <AddressLine3>'+@F6  +'</AddressLine3>
            <AddressLine4>'+@G7 +'</AddressLine4>
            <PostCode>'+@H8 +'</PostCode>
            <CountryCode>>'+@I9 +'</CountryCode>
        </CollectionAddress>
        <References>
            <Reference>
                <ReferenceName>name</ReferenceName>
                <ReferenceValue>'+@Z26 +'</ReferenceValue>
                <ParcelNumber>1</ParcelNumber>
            </Reference>
            <Reference>
                <ReferenceName>ref3</ReferenceName>
                <ReferenceValue>'+@AA27 +'</ReferenceValue>
                <ParcelNumber>2</ParcelNumber>
            </Reference>
        </References>
    </Consignment>
</PreAdvice>'

######################labelResponse = RestClient.post "https://papi.dpd.ie/common/api/preadvice", xmlPayloadAuthorised, 
######################{content_type: :xml, accept: :xml, authorization: "Bearer " + accessToken}
%>
<%
#parce the xml to get the access token
######################xmlLabelDoc  = Nokogiri::XML(labelResponse)
#get the access token
######################@labelURI = xmlLabelDoc.xpath("//LabelImage").text

######################@responseXML = xmlLabelDoc

%>



<!--___________________________________________________________________________ uncomment ALL to auto download the labels-->

<h3>XML Response</h3>
<br>
    <p><%=@responseXML%></p>
<script>
function print(){
    consosle.log("print");
}


//save a array now to attach one by one and then at the end run script to print an array ech element - make an array of urls and then call all the array until lenght

var labelUri = '<%@labelURI %>';
//get the array of labels URLs and push to an array
labelsArray.push('<%=@labelURI %>');
//if (labelUri.length < 50) {
//    var my_window = window.open('<%= @labelURI %>', '_blank');
// }
 </script>
<!--___________________________________________________________________________ uncomment ALL to auto download the labels--> 
 


<%#= creates a label link/button for each label%>
<%#= link_to "LABEL",@labelURI,  :class => "a", :target => "_blank"%>
                                          
                                     <!--
<%
@labelURI
# link_to labelURI, target: :_blank 

%>








<%#for esch row print a label end %>

 
 


     <p>END-------------
       <%#= Dir[".."]%>
       <p>-------------</p>
        <%#=customers = CSV.read('/home/ubuntu/workspace/storage/AE/bt/AEbtNbAYiVDqXyDMzN8oj9YE') %>
     <%= Dir.pwd%>
     <p>-------------</p>
     <%= Dir['/*'].each  {|entry|
  
     }
  
    %>
    
         -->
           <script>
       
             var csv = '<%=@csvFileLocation%>'; 
             var csvActual = '<%=@file5%>';
              var print = '<%=@print%>';
                 var csvRead = '<%=@csvRead%>';
             console.log(csv);
             console.log('actual  file =' + csvActual);
              console.log('print val = ' + print);
               console.log(csvRead);
                 
           </script>
           
       
      <!--     
       
        <%= 
       # delete directory
     # FileUtils.rm_rf('storage/2p')
    # if Dir['storage/*'].empty?
    #  'yes'
 
#      else
 #       'no'    
  #   end


  
 
    # Dir['storage/*'].each  {|entry| 
   #  if Dir['storage/*'].empty?
    #
     #'yes'
 
  #   else
   #   
    #   'no'    
  #  end
   # }
    
    
   # Dir.entries('storage/*').select {|entry| 
    ## if Dir['storage/*'][1].empty?
     # 'yes'
     # else
      #  'no'    
    # end
   # }
       
     %>
   
       <%=
       # @bulletin_last 
        #Dir.entries('storage').select {|entry| 
        #Dir.empty?('storage') 
       #link_to "+ 1 empty", rails_blob_path(bulletin.attachment, disposition: "attachment")  
       # }
   
      %>
      
      -->

<%= button_to 'Press me',:controller => :welcome, :action => :button %>
<p><%= @button %></p>
 <script>
       
             var btn = '<%=@button %>'; 
               console.log(btn);
                 
           </script>
<%= 

#submit_tag("Checkout"), onclick: "print();"

#doc = Nokogiri::HTML(open("http://www.threescompany.com"))
#doc = Nokogiri::HTML(open(labelURI))
%>         
      <center>
        <ul class="no-bullet">
          <%# @bulletin_list.each do |bulletin| %>
            <li>
              <%# if bulletin.attachment.previewable? %>
                <%#= link_to(image_tag(bulletin.attachment.preview(resize: "200x200>")),  rails_blob_path(bulletin.attachment, disposition: "attachment"))
                #%>
              <%# elsif bulletin.attachment.variable? %>
                <%#= link_to(image_tag(bulletin.attachment.variant(resize: "200x200")), rails_blob_path(bulletin.attachment, disposition: "attachment"))%>
              <%# else %>
                <%#= link_to "Download file", rails_blob_path(bulletin.attachment, disposition: "attachment") %>
              <%# end %>
            </li>
          <%# end %>
        </ul>
      </center>
    </div>
  </div> <!-- row -->
</div>



        <%else%>
        
       <% end%>
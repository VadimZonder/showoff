   <script>
   //OPEN ALL LABEL URLS
    ///console.log(labelsArray);
    function printLabels(){
        var i = 0;
        while (i < labelsArray.length) {
          window.open(labelsArray[i], '_blank'); 
          i++;
          }

        }
</script>

<div class="jumbotron text-center">
  <div class="container">
    <a href="/" class="lang-logo">
      <img src="<%= asset_path('Dpdlog') %>">
    </a>
    <h1>DPD Label Generator App</h1>
    <p>From APIs to a Label
  </div>
</div>


<div class="container">
  <div class="row">
              <label class=" float-right">
            <h3>Print All Labels</h3>
            <button class ="btn btn-print btn-lg " onclick="printLabels()">Print Labels</button>
        </label>
        
        
       <h3 id="ftpText"></h3>
     <br>
        <label class="switch">
            <br>
          <input type="checkbox" id="slider" onchange="isFTP()" >
          <span class="slider round"></span>
        </label>
  </div>
</div>
<hr />

<div class="container">
  <div class="row">
    <div class="purple-box u-padding-Al">
      <center>
        <h3>Browse, then upload a PDF, Video or Image to the Bulletin</h3>
        <% require 'csv' %>
        <%= render "upload", bulletin: @bulletin %>
      </center>
    </div>
    <hr />
  </div>
  
 
  <div class="row">
    <div class="col-md-12">
        
<%#=@isFtp = IsFTp.last%>
  
  <script>
//empty an array at the beginning
var labelsArray = [];

var isFtp = '<%=@isFtp%>';

 </script>

</head>
<body>
<%
@isFTP2 = @isFTP2.isFTP
%>
<script>
 var isFTP2 = '<%=@isFTP2%>';
</script>


<%#first check the value of what checkbox should be%>
<script>

     console.log('this is first isFTP2 var ' + isFTP2);
    if (isFTP2 == 'false'){
        document.getElementById("slider").checked = false;
        ftpText.innerText = "Local Import is ON";
     
    }
    else if (isFTP2 == 'true'){
        document.getElementById("slider").checked = true;
         ftpText.innerText = "FTP Import is ON";
    }
  

    </script>

 <%if @isFtp2 == false    %>

<script>
   // document.getElementById("slider").checked = false;
</script>
<%elsif  @isFtp2 == true  %>

<script>
   // document.getElementById("slider").checked = true;
</script>
<%end%>






    <script>
  
    console.log(slider);
    
    function isFTP (){  
        var slider=document.getElementById("slider").checked;
        if (slider==false){
              console.log(slider);
            
      document.cookie = "cl=" + slider +  ";";
        location.reload();
        }
        else if (slider==true){
            document.cookie = "cl=" + slider +  ";";
              location.reload();
        }
        //document.getElementById("slider").value = false;
      
    
        }
    
</script>



<script>
 //need both - here is the first definition of isFTP js function  
   // console.log(slider);


/*    
    function isFTP (){  
        var slider=document.getElementById("slider").checked;
        console.log(slider);
        
        if (slider == true){
            
      document.cookie = "cl=" + slider +  ";";
      //location.reload();
            
        }
        else if (slider == false){
            document.cookie = "cl=" + slider +  ";";
           // location.reload();
        }

      
 
    }
   */     
 
</script>



 


<br>
<br>
<br>
<br>



            <!--
      

  
     <%
         
        
        isFtp = IsFTp.last
        
        
require 'net/ftp'

ftp = Net::FTP::new("ftp.dpd.ie")
ftp.login("3L4", "3l4123")
ftp.chdir("/users/3L4/WebAppImport")

  files = ftp.list

  ftp.passive = true
   ftp.getbinaryfile("OurFormatEmailVadimTest.csv", "FromFTP")


#tgz = ftp.list("ruby-*.tar.gz").sort.last
#print "the latest version is ", tgz, "\n"
#ftp.getbinaryfile(tgz, tgz)
ftp.close
%>
            <%#= files%>
      
      <%#= Dir.chdir("/storage")%>
      <%#= Go to this directory%>
 <%if isFtp.isFTP == false %>      
      <p>Go to thos directory-------------</p>
       <% @storage = Dir["/home/ubuntu/workspace/storage/*"]%>
       <p>gets an array of folders-------------</p>
       <%#= gets and array of folders%>
        <% @storage.select do |directory|
        @foldersArray = directory
        end%>
         <p>Splits the array by the comma delimiter-------------</p>
         <%#= splits all the paths of folders to an arrayy%>
          <%=@foldersArray = @foldersArray.split(',')%>
          <p> getting first array, adding to search everything in that folder and  rid of quotes-------------</p>
          <%#= getting first array, adding to search everything in that folder and  rid of quotes%>
          <%=@foldersArray= @foldersArray[0].to_s+ '/*'.chomp('"').chomp('"') %>
           <p>if that first array is not empty run: go to the next folder, take the first file, and take the quotes out-------------</p>
            <%= Dir[@foldersArray+'/*']%>
          <%=  if Dir[@foldersArray].empty?
          'yes'
          else
             @csvFileLocation = Dir[@foldersArray+'/*']
              @csvFileLocation =@csvFileLocation [0].to_s+ '/*'.chomp('"').chomp('"')
            #customers = CSV.read(@csvFileLocation.chomp("/*")  )
             # Dir.entries("/home/ubuntu/workspace/storage/AE/bt/AEbtNbAYiVDqXyDMzN8oj9YE")
          'no'
          end%>
          
          
                 <p>Read the .csv file</p>
      <%  customers = CSV.read(@csvFileLocation.chomp("/*")) %>
          
          
          <%else%>
           <%  @csvFileLocation =  '/home/ubuntu/workspace/FromFTP' %>
          <%  customers = CSV.read(@csvFileLocation.chomp("/*")) %>
          
     <%end%>  
          
          
     
      
<%#= take each row in csv and get rid of the quotes%>      
     <%CSV.foreach(@csvFileLocation.chomp("/*")) do |row1|
@csvColumn1 =  row1[0].inspect.gsub!('"', '') #+  @csvRow1.inspect 
@csvColumn2 =  row1[1].inspect.gsub!('"', '') 
@csvColumn3 =  row1[2].inspect.gsub!('"', '') 
@csvColumn4 =  row1[3].inspect.gsub!('"', '') 
@csvColumn5 =  row1[4].inspect.gsub!('"', '') 
@csvColumn6 =  row1[5].inspect.gsub!('"', '')  
@csvColumn7 =  row1[6].inspect.gsub!('"', '')  
@csvColumn8 =  row1[7].inspect.gsub!('"', '')  
@csvColumn9 =  row1[8].inspect.gsub!('"', '')  
@csvColumn10 =  row1[9].inspect.gsub!('"', '')  
@csvColumn11 =  row1[10].inspect.gsub!('"', '')  
@csvColumn12 =  row1[11].inspect.gsub!('"', '')  
@csvColumn13 =  row1[12].inspect.gsub!('"', '')  
@csvColumn14 =  row1[13].inspect.gsub!('"', '')  
@csvColumn24 =  row1[23].inspect.gsub!('"', '')  
@csvColumn25 =  row1[24].inspect.gsub!('"', '')  
@csvColumn26 =  row1[25].inspect.gsub!('"', '')  
@csvColumn27 =  row1[26].inspect.gsub!('"', '') 
@csvColumn30 =  row1[29].inspect.gsub!('"', '')  
@csvColumn31 =  row1[30].inspect.gsub!('"', '')  
@csvColumn32 =  row1[31].inspect.gsub!('"', '')  


#end
%>



<%
 @mapping_array = [@csvColumn1,@csvColumn2, @csvColumn3 ,@csvColumn4 , 
                   @csvColumn5, @csvColumn6 , @csvColumn7 ,@csvColumn8 ,
                   @csvColumn9 , @csvColumn10 , @csvColumn11 ,@csvColumn12 , 
                   @csvColumn13, @csvColumn14, @csvColumn25, @csvColumn25, @csvColumn26, 
                  @csvColumn27,  @csvColumn30, @csvColumn31 , @csvColumn32   ]
                   
  #user_input_mapping = change all to integers
  a = @a1.to_i
  b = @b2.to_i
  c = @c3.to_i
  d = @d4.to_i
  e = @e5.to_i
  f = @f6.to_i
  g = @g7.to_i
  h = @h8.to_i
  i = @i9.to_i
  j = @j10.to_i
  k = @k11.to_i
  l = @l12.to_i
  m = @m13.to_i
  n = @n14.to_i
  x = @x24.to_i
  y = @y25.to_i
  z = @z26.to_i
  aa = @aa27.to_i
  ad = @ad30.to_i
  ae = @ae31.to_i
  af = @af32.to_i
  
  @xml_input_a  = a.to_s
  @xml_input_b  = b.to_s
  @xml_input_c  = c.to_s
  @xml_input_d  = d.to_s
  @xml_input_e  = e.to_s
  @xml_input_f  = f.to_s
  @xml_input_g  = g.to_s
  @xml_input_h  = h.to_s
  @xml_input_i  = i.to_s
  @xml_input_j  = j.to_s
  @xml_input_k  = k.to_s
  @xml_input_l  = l.to_s
  @xml_input_m  = m.to_s
  @xml_input_n  = n.to_s
  @xml_input_x  = x.to_s
  @xml_input_y  = y.to_s
  @xml_input_z  = z.to_s
  @xml_input_aa  = aa.to_s
   @xml_input_ad = ad.to_s
    @xml_input_ae  = ae.to_s
     @xml_input_af  = af.to_s
     
  
 %>
 <br>
<%
  @mapping_array[d]
 %>
 
  
 
 <%


#response = RestClient::Request.execute(
#RestClient.post 'https://papi.dpd.ie/common/api/authorize',{"User":"3062L3", "Password":"wgBhsMr6EP", "Type":"CUST"} 
#ENV['SSL_CERT_FILE'] = /cacert.pem
require 'open-uri'
require 'rest-client'

#get the authorise token
xmlPayloadAuthorise = 
'<?xml version="1.0" encoding="iso-8859-1"?>
<Request>
<User>5287L9</User>
<Password>db44t66Dat</Password>
<Type>CUST</Type>
</Request>'

authorizeResponce = RestClient.post "https://papi.dpd.ie/common/api/authorize", xmlPayloadAuthorise, 
{content_type: :xml, accept: :xml, authorization: "Bearer R3JlZW5JVDpHcmVlbklUUGFzc3cwcmQyMDE4"}

%>
<%
#parce the xml to get the access token
xmlAuthorizeDoc  = Nokogiri::XML(authorizeResponce)
#get the access token
accessToken = xmlAuthorizeDoc.xpath("//AccessToken").text

%>
<br>

<p>works here</p>
<%=@csvColumn4%> ,
<%=@xml_input_d %>, 
<%=@mapping_array[@xml_input_d.to_i]%>,

<%@A = @mapping_array[@xml_input_a.to_i]%>,
<%=@A= @A.to_s%>,

<%@X = @mapping_array[@xml_input_x.to_i]%>,
<%=@X= @X.to_s%>,

<%@Y = @mapping_array[@xml_input_y.to_i]%>,
<%=@Y= @Y.to_s%>,

<%@AD = @mapping_array[@xml_input_ad.to_i]%>,
<%=@AD= @AD.to_s%>,


<%@C = @mapping_array[@xml_input_c.to_i]%>
<%=@C= @C.to_s%>

<%@D = @mapping_array[@xml_input_d.to_i]%>
<%@D= @D.to_s%>

<%@E = @mapping_array[@xml_input_e.to_i]%>
<%=@E= @E.to_s%>

<%@F = @mapping_array[@xml_input_f.to_i]%>
<%=@F= @F.to_s%>

<%=@G = @mapping_array[@xml_input_g.to_i]%>
<%=@G= @G.to_s%>
<p>works here</p>
<%

                   
  #user_input_mapping = change all to integers

  
 
xmlPayloadAuthorised = 
'<?xml version="1.0" encoding="iso-8859-1"?>
<PreAdvice>
    <Consignment>
        <RecordID>'+ @A +  '</RecordID>
        <AlertEmailAddress>mhmaechler@gmail.com</AlertEmailAddress>
        <ConsignmentDescription>LG.124132D</ConsignmentDescription>
        <ConsignmentDate>2018-12-03</ConsignmentDate>
        <CustomerAccount>1111L1</CustomerAccount>
        <DeliveryDepot>0</DeliveryDepot>
        <Gazzed>0</Gazzed>
        <GazzType>PreAdvice</GazzType>
        <TrackingNumber>0</TrackingNumber>
        <TotalParcels>1</TotalParcels>
        <Relabel>1</Relabel>
        <ServiceOption>5</ServiceOption>
        <ServiceType>1</ServiceType>
        <Weight>10</Weight>
        <DeliveryAddress>
            <Contact>'+@X  +'</Contact>
            <ContactTelephone>'+@Y  +'</ContactTelephone>
            <ContactEmail>'+@AD  +'</ContactEmail>
            <BusinessName>'+@C  +'</BusinessName>
            <AddressLine1>'+@D  +'</AddressLine1>
            <AddressLine2>'+@E  +'</AddressLine2>
            <AddressLine3>'+@F  +'</AddressLine3>
            <AddressLine4>'+@G +'</AddressLine4>
            <PostCode></PostCode>
            <CountryCode>IE</CountryCode>
        </DeliveryAddress>
        <CollectionAddress>
           <Contact>'+@X  +'</Contact>
            <ContactTelephone>'+@Y  +'</ContactTelephone>
            <ContactEmail>'+@AD  +'</ContactEmail>
            <BusinessName>'+@C  +'</BusinessName>
            <AddressLine1>'+@D  +'</AddressLine1>
            <AddressLine2>'+@E  +'</AddressLine2>
            <AddressLine3>'+@F  +'</AddressLine3>
            <AddressLine4>'+@G +'</AddressLine4>
            <CountryCode>IE</CountryCode>
        </CollectionAddress>
        <References>
            <Reference>
                <ReferenceName>loadnumber</ReferenceName>
                <ReferenceValue>LG.124132D</ReferenceValue>
                <ParcelNumber>1</ParcelNumber>
            </Reference>
            <Reference>
                <ReferenceName>loadnumber</ReferenceName>
                <ReferenceValue>LG.124132D</ReferenceValue>
                <ParcelNumber>2</ParcelNumber>
            </Reference>
        </References>
    </Consignment>
</PreAdvice>'

labelResponce = RestClient.post "https://papi.dpd.ie/common/api/preadvice", xmlPayloadAuthorised, 
{content_type: :xml, accept: :xml, authorization: "Bearer " + accessToken}
%>
<%
#parce the xml to get the access token
xmlLabelDoc  = Nokogiri::XML(labelResponce)
#get the access token
@labelURI = xmlLabelDoc.xpath("//LabelImage").text

%>
<%

#doc = Nokogiri::HTML(open("http://www.threescompany.com"))
#doc = Nokogiri::HTML(open(labelURI))
%>

<!--___________________________________________________________________________ uncomment ALL to auto download the labels-->

<script>
//save a array now to attach one by one and then at the end run script to print an array ech element - make an array of urls and then call all the array until lenght

var labelUri = '<%@labelURI %>';
//get the array of labels URLs and push to an array
labelsArray.push('<%=@labelURI %>');
//if (labelUri.length < 50) {
//    var my_window = window.open('<%= @labelURI %>', '_blank');
// }
 </script>
<!--___________________________________________________________________________ uncomment ALL to auto download the labels--> 
 


<%#= creates a label link/button for each label%>
<%#= link_to "LABEL",@labelURI,  :class => "a", :target => "_blank"%>
                                          
 <!--
<%
@labelURI
# link_to labelURI, target: :_blank 

%>








<%#for esch row print a label end %>
 <%end%>
 
 


     <p>END-------------
       <%#= Dir[".."]%>
       <p>-------------</p>
        <%#=customers = CSV.read('/home/ubuntu/workspace/storage/AE/bt/AEbtNbAYiVDqXyDMzN8oj9YE') %>
     <%= Dir.pwd%>
     <p>-------------</p>
     <%= Dir['/*'].each  {|entry|
  
     }
  
    %>
     
       
        <%= 
       # delete directory
     # FileUtils.rm_rf('storage/2p')
    # if Dir['storage/*'].empty?
    #  'yes'
 
#      else
 #       'no'    
  #   end


  
 
    # Dir['storage/*'].each  {|entry| 
   #  if Dir['storage/*'].empty?
    #
     #'yes'
 
  #   else
   #   
    #   'no'    
  #  end
   # }
    
    
   # Dir.entries('storage/*').select {|entry| 
    ## if Dir['storage/*'][1].empty?
     # 'yes'
     # else
      #  'no'    
    # end
   # }
       
     %>
   
       <%=
       # @bulletin_last 
        #Dir.entries('storage').select {|entry| 
        #Dir.empty?('storage') 
       #link_to "+ 1 empty", rails_blob_path(bulletin.attachment, disposition: "attachment")  
       # }
   
      %>
      
      -->


       <%= link_to({:controller => 'mappings', :action => 'new'}) do%>
           <div class="container">
  <div class="row">
    <div class="purple-box u-padding-Al">
      <left>
        <h3>Map Your Import File</h3>
        <%#= render "upload", bulletin: @bulletin %>
      </left>
    </div>
    <hr />
  </div>
<% end %>  


           
      <center>
        <ul class="no-bullet">
          <% @bulletin_list.each do |bulletin| %>
            <li>
              <% if bulletin.attachment.previewable? %>
                <%= link_to(image_tag(bulletin.attachment.preview(resize: "200x200>")),  rails_blob_path(bulletin.attachment, disposition: "attachment"))
                %>
              <% elsif bulletin.attachment.variable? %>
                <%= link_to(image_tag(bulletin.attachment.variant(resize: "200x200")), rails_blob_path(bulletin.attachment, disposition: "attachment"))%>
              <% else %>
                <%= link_to "Download file", rails_blob_path(bulletin.attachment, disposition: "attachment") %>
              <% end %>
            </li>
          <% end %>
        </ul>
      </center>
    </div>
  </div> <!-- row -->
</div>
